Q1)
class Solution {
public:
    int longestPalindrome(string s) {
        if(s.empty()) return 0;
        unordered_map<char,int>mp;
        for(int i=0;i<s.size();i++){
            mp[s[i]]++;
        }
        if(mp.size()==1) return s.size();
        int ans=0;
        bool foundodd=false;
        for(auto it:mp){
            if(it.second%2==0) ans=ans+it.second;
            if(it.second%2==1){ 
                ans=ans+(it.second-1);
                foundodd=true;
            }
        }
        if(foundodd==true) ans=ans+1;
        return ans;
    }
};

Q2)
class Solution {
public:
    int distMoney(int money, int children) {
        int m=money;
        int n=children;
        if(m<n) return -1;
        m=m-n;
        int ans=0;
        while(m>=7 && ans<n){
            m-=7;
            ans++;
        }
        
        if((ans==n && m>0 )||(m==3 && n-ans==1)) ans--;

        return ans;
    }
};

Q3) Leetcode POTD 
class Solution {
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {
        bool foundmissing=false,founddouble=false;
        int missingnum,doublenum;
        int n=grid.size();
        int num=n*n;
        vector<int>vec(num,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                vec[grid[i][j]-1]++;
            }
        }

        for(int i=0;i<vec.size();i++){
            if(foundmissing==true && founddouble==true) break;
            if(vec[i]==0){ 
                missingnum=i+1;
                foundmissing=true;
            }
            if(vec[i]==2){ 
                doublenum=i+1;
                founddouble=true;
            }
        }   
        return {doublenum,missingnum};
    }
};
