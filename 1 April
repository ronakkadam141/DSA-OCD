q1) Find loop length
code:
class Solution {
  public:
    // Function to find the length of a loop in the linked list.
    int countNodesinLoop(Node *head) {
        Node *hare=head;
        Node *tortoise=head;
        int len=0;
        while(hare!=nullptr && hare->next!=nullptr){
            hare=hare->next->next;
            tortoise=tortoise->next;
            if(hare==tortoise){
                hare=hare->next;
                while(hare!=tortoise){
                    len++;
                    hare=hare->next;
                }
                len++;
                break;
            }
        }
        
        return len;
    }
};
TC:O(N)
SC:O(1)

q2)Palindrome
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head->next==nullptr) return true;
        
        ListNode *tortoise=head, *hare=head;
        while (hare!=nullptr && hare->next!=nullptr) {
            tortoise = tortoise->next;
            hare = hare->next->next;
        }
        
        ListNode *prev=nullptr, *curr=tortoise;
        while (curr) {
            ListNode *next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        
        ListNode *left = head, *right = prev;
        while (right) {
            if (left->val != right->val) return false;
            left = left->next;
            right = right->next;
        }
        
        return true;
    }
};
TC:O(N)
SC:O(1)
