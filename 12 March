LC POTD: 
Code:
class Solution {
private: 
    int BS_negative(vector<int>&nums){
        int low=0;
        int high=nums.size()-1;
        if(nums[0]>=0) return 0;
        while(low<=high){
            int mid=(low+high)/2;

            if(nums[mid]>=0) high=mid-1;
            else low=mid+1;
        }
        return low;
    }
    int BS_positive(vector<int>&nums){
        int low=0;
        int high=nums.size()-1;
        if(nums[high]<=0) return 0;
        while(low<=high){
            int mid=(low+high)/2;

            if(nums[mid]<=0) low=mid+1;
            else high=mid-1;
        }
        return nums.size()-low;
    }
public:
    int maximumCount(vector<int>& nums) {
        int negative=BS_negative(nums);
        int positive=BS_positive(nums);

        return max(negative,positive);
    }
};
TC: O(logN)
SC:O(1)

q1)
Code: 
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>ans;
        int count=0;
        
        vector<int>ele={1};
        ans.push_back(ele);
        for(int i=1;i<numRows;i++){
            vector<int>vecpush(i+1,1);
            for(int j=1;j<i;j++){
                vecpush[j]=ele[j]+ele[j-1];
            }
            ans.push_back(vecpush);
            ele=vecpush;
        }
        return ans;
    }
};
TC:O(N^2) 
SC:O(N)

q2)
Code:
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int rows=matrix.size(),coloumns=matrix[0].size();

        for(int i=0;i<rows;i++){
            for(int j=i;j<coloumns;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }

        for(int i=0;i<rows;i++){
            if(coloumns%2==0){
                for(int j=0;j<=(coloumns/2)-1;j++){
                    swap(matrix[i][j],matrix[i][coloumns-j-1]);
                }
            }
            else{
                for(int j=0;j<=(coloumns/2);j++){
                    swap(matrix[i][j],matrix[i][coloumns-j-1]);
                }            
            }        
        }
    }   
};

TC:O(N^2)
SC:O(1)

q3)
Code:
class Solution {
public:
    vector<int> pivotArray(vector<int>& nums, int pivot) {
        int n=nums.size();
        vector<int>result;
        
        for(int i=0;i<n;i++){
            if(nums[i]<pivot)result.push_back(nums[i]);
        }
        for(int i=0;i<n;i++){
            if(nums[i]==pivot)result.push_back(nums[i]);
        }
        for(int i=0;i<n;i++){
            if(nums[i]>pivot)result.push_back(nums[i]);
        }

        for(int i=0;i<n;i++){
            nums[i]=result[i];
        }

        return nums;
    }
};
TC:O(N)
SC:O(N)
