q1) find key
Code:
class Solution {
  public:
    // Function to count nodes of a linked list.
    bool searchKey(int n, Node* head, int key) {
        
        if(head==nullptr) return false;
        
        Node* temp=head;
        
        while(temp!=nullptr){
            if(temp->data==key) return true;
            else temp=temp->next;
        }
        
        return false;
    }
};
TC:O(N)
SC:O(1)

q2) Addition of Node
Code:
class Solution {
  public:
    // Function to insert a new node at given position in doubly linked list.
    Node *addNode(Node *head, int pos, int data) {
        
        if(head==nullptr){
            return new Node(data);
        }
        
        int n=1;
        Node*temp=head;
        
        while(temp->next!=nullptr){
            n++;
            temp=temp->next;
        }
        
        Node* newnode= new Node(data);
        if((n-1)==pos){
            temp->next=newnode;
            newnode->prev=temp;
            return head;
        }
        
        int count=0;
        temp=head;
        Node *front=head->next;
        while(front!=nullptr){
            if(count==pos) break;
            else{ 
                count++;
                temp=temp->next;
                front=front->next;
            }
        }
        temp->next=newnode;
        front->prev=newnode;
        newnode->next=front;
        newnode->prev=temp;
        
        return head;
    }
};
