LC POTD:
class Solution {
private:
    bool possible(vector<int>& candies, long long k,int mid){
        long long pairs=0;
        for(int i=0;i<candies.size();i++){
            int num=candies[i];
            pairs+=num/mid;
            if(pairs>=k) return true;
        }
        return false;
    }
public:
    int maximumCandies(vector<int>& candies, long long k) {
        int n=candies.size();
        int low=1;
        int high=INT_MIN;
        long long sum=0;
        for(int i=0;i<n;i++){
            sum+=candies[i];
            if(high<candies[i]) high=candies[i];
        }
        if(sum<k) return 0;
        int ans;
        while(low<=high){
            int mid=(low+high)/2;
            
            if(possible(candies,k,mid)){
                ans=mid;
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return ans;
    }   
};

SC: O(N*log(H)) H=max(candies)
TC: O(1)
